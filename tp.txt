#upload.html in templates(Onboarding_app)
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Candidate Onboarding</title>
    {% load static %} <!-- Load the staticfiles library -->
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body class="bg-light">
    <div class="container my-5">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h3>Upload Candidate Form</h3>
            </div>
            <div class="card-body">
                <form method="post" enctype="multipart/form-data">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="file" class="form-label">Upload Form (PDF/Image):</label>
                        <input type="file" class="form-control" id="file" name="file" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
                {% if message %}
                <div class="alert alert-info mt-3">
                    {{ message }}
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</body>
</html>

#styles.css in static(Onboarding_app)
body {
    background-color: #f8f9fa;
}

.card {
    margin: 20px auto;
    max-width: 600px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

ul.list-group {
    margin-top: 20px;
    padding: 0;
}

ul.list-group li {
    font-size: 1rem;
    padding: 10px;
    border: 1px solid #dee2e6;
    border-radius: 5px;
    margin-bottom: 5px;
    background-color: #fff;
}

button.btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    transition: background-color 0.3s ease;
}

button.btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
}

#views.py in Onboarding_app
from django.core.exceptions import ValidationError
from django.http import HttpResponseBadRequest
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from .models import Candidate
from .utils import extract_information_from_file  # Assuming this function exists

def upload_form(request):
    if request.method == 'POST' and request.FILES.get('file'):
        uploaded_file = request.FILES['file']

        # Save the file to a temporary directory
        fs = FileSystemStorage(location='uploaded_files/')
        file_path = fs.save(uploaded_file.name, uploaded_file)
        file_path = fs.path(file_path)

        # Extract data
        extracted_data = extract_information_from_file(file_path)

        if extracted_data and 'candidate_info' in extracted_data:
            candidate_info = extracted_data['candidate_info']

            # Validate required fields
            required_fields = ['first_name', 'last_name', 'mobile']
            missing_fields = [field for field in required_fields if field not in candidate_info]

            if missing_fields:
                return render(request, 'upload.html', {
                    'message': f"Missing required fields: {', '.join(missing_fields)}",
                    'extracted_data': candidate_info
                })

            # Save to database (if required fields are present)
            candidate = Candidate(**candidate_info)
            candidate.save()

            message = "Form successfully processed and data saved!"
        else:
            message = "Failed to extract candidate information. Please check the file format and content."
            candidate_info = {}

        return render(request, 'upload.html', {'message': message, 'extracted_data': candidate_info})

    return render(request, 'upload.html')

#utils.py in Onboarding_app
from PIL import Image
from pdf2image import convert_from_path
import pytesseract
import re

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

def extract_information_from_file(file_path):
    """
    Extracts candidate information from an uploaded image or PDF file using OCR.
    Specifically tailored to the provided PDF format.
    """
    extracted_data = {'candidate_info': {}}

    try:
        # Convert PDF to images and extract text
        if file_path.endswith('.pdf'):
            images = convert_from_path(file_path)
            text = ' '.join([pytesseract.image_to_string(image) for image in images])
        else:
            text = pytesseract.image_to_string(Image.open(file_path))

        # Clean OCR output
        text = re.sub(r'\s+', ' ', text).strip()

        # Parse specific fields
        name_match = re.search(
            r"Name \(Block Letters.*?\):\s*(\w+)\s+(\w+)?\s+(\w+)?", text, re.IGNORECASE
        )
        mobile_match = re.search(r"Mobile:\s*(\d+)", text)

        # Extract and assign values
        if name_match:
            extracted_data['candidate_info']['first_name'] = name_match.group(1)
            if name_match.group(2):
                extracted_data['candidate_info']['middle_name'] = name_match.group(2)
            if name_match.group(3):
                extracted_data['candidate_info']['last_name'] = name_match.group(3)
        else:
            print("Name not found.")

        if mobile_match:
            extracted_data['candidate_info']['mobile'] = mobile_match.group(1)
        else:
            print("Mobile number not found.")

    except Exception as e:
        print(f"Error during extraction: {e}")

    return extracted_data

#tests.py in Onboarding_app
from django.test import TestCase

#models.py in Onboarding_app
from django.db import models
class Candidate(models.Model):
    first_name = models.CharField(max_length=255,blank=True, null=True)
    middle_name = models.CharField(max_length=255, blank=True, null=True)
    last_name = models.CharField(max_length=255,blank=True, null=True)
    permanent_address = models.CharField(max_length=255, blank=True, null=True)
    current_address = models.TextField(blank=True, null=True)
    date_of_birth = models.DateField(null=True, blank=True)
    age = models.IntegerField(null=True, blank=True)
    gender = models.CharField(max_length=50,blank=True, null=True)
    passport = models.CharField(max_length=50, null=True, blank=True)
    mobile = models.CharField(max_length=15,blank=True, null=True)
    pan_no = models.CharField(max_length=50, blank=True, null=True)
    visa = models.CharField(max_length=50, blank=True, null=True)
    email = models.EmailField(unique=True,blank=True, null=True)
    emergency_contact_name = models.CharField(max_length=255,blank=True, null=True)
    emergency_contact_number = models.CharField(max_length=15,blank=True, null=True)
    relocation_availability = models.BooleanField(blank=True, null=True)
    def __str__(self):
        return f"{self.first_name} {self.last_name}"

#apps.py in Onboarding_app
from django.apps import AppConfig
class OnboardingAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'onboarding_app'

#admin.py in onboarding_app
from django.contrib import admin

__init__.py in onboarding_app

__init__.py in migrations(Onboarding_app)

0001_initial.py in migrations(onboarding_app)
# Generated by Django 5.1.4 on 2024-12-29 11:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(max_length=255)),
                ('permanent_address', models.CharFieldField(blank=True, max_length=255, null=True)),
                ('current_address', models.CharFieldField(blank=True, max_length=255, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=255, null=True)),
                ('passport', models.CharField(blank=True, max_length=50, null=True)),
                ('mobile', models.CharField(max_length=15)),
                ('pan_no', models.CharField(blank=True, max_length=50, null=True)),
                ('visa', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True , unique=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_number', models.CharField(max_length=15,blank=True, null=True)),
                ('relocation_availability', models.BooleanField(blank=True, null=True)),
            ],
        ),
    ]

0002_alter_candidate_date_of_birth.py in migrations(onboarding_app)
# Generated by Django 5.1.4 on 2024-12-29 14:29
from django.db import migrations, models
class Migration(migrations.Migration):
    dependencies = [
        ('onboarding_app', '0001_initial'),
    ]
    operations = [
        migrations.AlterField(
            model_name='candidate',
            name='date_of_birth',
            field=models.DateField(blank=True, null=True),
        ),
    ]

#wsgi.py in candidate_onboarding
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'candidate_onboarding.settings')
application = get_wsgi_application()

#urls.py in candidate_onboarding
from django.contrib import admin
from django.urls import path
from onboarding_app import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.upload_form, name='upload_form'),
]

#settings.py in candidate_onboarding
from pathlib import Path
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x7myabq5#j$&i7bhbg)#v$&==*7de^8g(v_kzq4@!mbt-tas9k'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'onboarding_app',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'candidate_onboarding.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # No need to change this since we're using app templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'candidate_onboarding.wsgi.application'
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'  # URL to access static files
# Directory where Django will look for additional static files
STATICFILES_DIRS = [
    BASE_DIR / "onboarding_app/static",
]
# The directory where Django will collect all static files (for production)
STATIC_ROOT = BASE_DIR / "staticfiles"
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#asgi.py in candidate_onboarding
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'candidate_onboarding.settings')
application = get_asgi_application()

__init__.py in candidate_onboarding



This is my entire code now tell me improvisations to be made in the code so it would accept the input i showed you and wont throw errors




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Candidate List</title>
</head>
<body>
    <h1>Candidate List</h1>
    <ul>
        {% for candidate in candidates %}
            <li>
                {{ candidate.first_name }} {{ candidate.middle_name }} {{ candidate.last_name }} - {{ candidate.mobile }}
            </li>
        {% endfor %}
    </ul>
</body>
</html>

This was the code you gave me to view candidate details but it is only showing candidate's first name, middle name, last name and candidate's mobile. I want to view every single information extracted by program.
Also make the interface more interactive 






from django.core.exceptions import ValidationError
from django.http import HttpResponseBadRequest
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from .models import Candidate
from .utils import extract_information_from_file  # Assuming this function exists
from datetime import datetime
from django.shortcuts import render, redirect


def upload_form(request):
    if request.method == 'POST' and request.FILES.get('file'):
        uploaded_file = request.FILES['file']

        # Save the file to a temporary directory
        fs = FileSystemStorage(location='uploaded_files/')
        file_path = fs.save(uploaded_file.name, uploaded_file)
        file_path = fs.path(file_path)

        # Extract data
        extracted_data = extract_information_from_file(file_path)

        if extracted_data and 'candidate_info' in extracted_data:
            candidate_info = extracted_data['candidate_info']

            # Validate required fields
            required_fields = ['first_name', 'last_name', 'mobile']
            missing_fields = [field for field in required_fields if field not in candidate_info]

            if missing_fields:
                return render(request, 'upload.html', {
                    'message': f"Missing required fields: {', '.join(missing_fields)}",
                    'extracted_data': candidate_info
                })

            # Save to database (if required fields are present)
            candidate = Candidate(**candidate_info)
            candidate.save()

            message = "Form successfully processed and data saved!"
        else:
            message = "Failed to extract candidate information. Please check the file format and content."
            candidate_info = {}

        return render(request, 'upload.html', {'message': message, 'extracted_data': candidate_info})

    return render(request, 'upload.html')

def candidate_list(request):
    candidates = Candidate.objects.all()
    return render(request, 'candidate_list.html', {
        'candidates': candidates,
        'current_year': datetime.now().year
    })

def delete_candidate(request, candidate_id):
    Candidate.objects.filter(id=candidate_id).delete()
    return redirect('candidate_list')  # Redirect to the candidates list

def delete_all_candidates(request):
    Candidate.objects.all().delete()
    return redirect('candidate_list')  # Redirect to the candidates list

This is my current view.py how what modifictions need to be done to make sure errors are resolved